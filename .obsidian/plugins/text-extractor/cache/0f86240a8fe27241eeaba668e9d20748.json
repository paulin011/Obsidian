{"path":"Statistik/Softwaretechnik/Images/Pasted image 20231211114715.png","text":"Test-Driven Development (TDD) S_ Motivation: Writing tests after coding often Wite failing test M Make test pass leads to late feedback or no tests at all TDD approach: Write tests first (before coding)! Advantages and claims: *_ Thinking about tests also means thinking -about requirements Pragmatic TDD * The tests control the pace of the * Use TDD when you do not know how to design implementation (simple vs. complex tests) -and/or architect a part of the system * Quick feedback * Use TDD when you are dealing with a complex * Feedback on design (e.g., a class with many problem, a problem in which you lack tests may have too many functionalities, too â€˜experience many m Indicstesjtighteotpiing) * Do not use TDD when you are familiar with the M problem, or the design decisions are clear in ? 'your mind (still, do not forget to write tests) +","libVersion":"0.3.1","langs":"deu+eng"}