{"path":"Softwaretechnik/Lectures/02_git.pdf","text":"Software Engineering Version Control with git 2 Aims of today's Lecture ‚Ä¢ Know what configuration management is. ‚Ä¢ Know how (distributed) version control systems work. ‚Ä¢ Know development workflows for teams with VCSs. Software Configuration Management & Version Controlhttps://www.cognidox.com/blog/what-is-document-version-control 4 Challenges in Software Development Many developers Many changes * * * * Many projects v2.1 v2.2 v2.2.1 Many versions Many requirements We need coordination. 6 SCM Functionalities There are four main aspects of SCM: ‚Ä¢ Version control (VCS): Manage code changes in sequential and parallel development, allow collaborative development. ‚Ä¢ Change management: Track and plan change requests. ‚Ä¢ Build management: Collect, compile and link code and libraries into executable software. ‚Ä¢ Release management: Prepare new releases and manage old releases. In this lecture, we focus on VCS. The later ones follow in lectures for process models, management and deployment. 7 Why Version Control? We want (and need to): ‚Ä¢ know who has changed what, when, why. ‚Ä¢ go back to older version. ‚Ä¢ share changes. ‚Ä¢ work in parallel and manage integration. ‚Ä¢ manage versions and variants. 8 Common VCS Tools ‚Ä¢ Local only: SCCS (1972), RCS (1982) ‚Ä¢ Centralized: CVS (1986), SVN (2000) ‚Ä¢ Decentralized: git (2005), mercurial (2005) git Basics 10 Working Directory and Repository Working Directory Contains \"current state\" of a developer's version of the project. Repository Contains all versions and all variants of the project. src/‚Ä¶/userdata Employee.javaStudent.java 11 CVS und SVN: Centralized VCS Principle: One central repository (\"official version\"). Each dev has their own working directory with copies of the project (may contain new, temporary, unfinished,‚Ä¶ versions) IDE IDE VCS VCS Repository on central server Working Directory Working Directory Developer Developer 12 Exchanging Intermediate State in Centralized VCS Alice works on a feature of the project and is ~half-way through. Bob works on another feature that uses Alice's feature, so he asks her to send him her current state. There are two possibilities: ‚Ä¢ Commit to repository. ‚Ä¢ Send via e-mail. Project Repository Alice Bob Dave checkout commit checkout 14 git: Decentralized VCS Principle: Each developer has their own local repository. There is not \"the one\" repository. Developers can exchange their work by pushing changes to their colleagues' repositories. IDE IDE VCS VCS Working Directory Working Directory Developer Developer Local Repository Local Repository 15 git: Centralized-Decentralized VCS Principle: Each developer has a local repository but there is one central repository every developer pushes their changes to. IDE IDE VCS VCS Repository on central server Working Directory Working Directory Developer Developer Local Repository Local Repository 16 Remote Repositories Every repository is treated equivalent. That means, every repository can be cloned, and one can push/pull to/from every repository. Prerequisite is that the targeted repository is set as a remote. ‚Ä¢ remote = different, known repository, specified via url or path. ‚Ä¢ origin = remote repository from which the local repository was cloned. ‚Ä¢ fetch = get information about new remote branches and changes without integrating them. ‚Ä¢ tracking = mapping of local and remote branches. ‚Ä¢ Push/pull always operate on branches that track a remote branch. 17 Initial Situation IDE VCS Repository on central server Alice 18 Cloning a Project git clone <address> Create a local repository with a copy of the current version from the origin. IDE VCS Repository on central server Working Directory Alice Local Repository git clone 19 Making a Change The developer changes (create new files, delete existing files, change content of files) some files in their working directory. IDE VCS Repository on central server Working Directory Alice Local Repository 20 Creating a new local Version git add <file names> git commit <commit message> git commit <commit message> <file names> The developer selects which changes should be integrated in the repository. They add several changes to the index and then create a commit with these changes. IDE VCS Repository on central server Working Directory Alice Local Repository Index git add git commit git commit files 21 Transfer current Version from Local to Remote Repository git push <remote> The developer pushes the latest commits to the remote/origin repository. IDE VCS Repository on central server Working Directory Alice Local Repository git push 22 Get current Version from Remote Repository git pull <remote> The developer pulls the latest changes from the remote/origin repository into their local repository and working directory. IDE VCS Repository on central server Working Directory Bob Local Repository git pull 23 Get specific Version from Local Repository git checkout commit <commit id> The developer load the version of a certain commit into the working directory. IDE VCS Repository on central server Working Directory Bob Local Repository git checkout commit 24 Problem: Simultaneous Local and Remote Changes What happens when we have changes in our local repository and pull from remote, where new changes happened as well? Git tries to perform an automatic merge. If there are changes to the same lines of a text-based file, automatic merging is not possible, and the developer needs to decide how to merge. Timeline Project Repository Local Alice Central Repository Project Push ùë°ùë°0 Local Bob Project Pull ùë°ùë°1 Push ùë°ùë°2 Pull ùë°ùë°4ùë°ùë°3 Conflict? Push Reference version 25 Automatic 3-Way-Merge Successful Merge Dev does not need to do anything. Merge Conflict Dev must choose what to keep. Automatic Merging is based on the reference version (newest common ancestor) ... x=0 ... ... x=0 ... A ... x=1 ... B ... x=1 ... Apply change Change ... x=0 ... ... x=10 ... A ... x=1 ... B <<<<<<< .A x=10 ======= x=1 >>>>>>> .B Apply change ChangeChange Apply change 26 Side-by-Side View in IDE 29 Parallel Development in \"Branches\" Idea: ‚Ä¢ Versions = sequential development line. ‚Ä¢ Variants = parallel development lines. Application examples: ‚Ä¢ Bug fixes for current release while working on next release in parallel. ‚Ä¢ Work on different features in parallel. A branch allows to build a variant of the system. At some point in the repository's history, the development splits up, creating the branch. At some point, we want to integrate the changes of the branch again. For this, we merge our branch into the target branch.Git Good Habits 0.0 0.2 0.3 0.40.1 32 Feature Branch Flow ‚Ä¢ Main/Master only for deployable releases. ‚Ä¢ Development as main development branch. ‚Ä¢ Each new feature gets its own branch. ‚Ä¢ For upcoming release: create release branch. ‚Ä¢ Maintenance/Hotfix Branches may directly merge into Main. 0.0 0.2 0.3 0.40.1 https://www.atlassian.com/de/git/tutorials/comparing-workflows/gitflow-workflow 33 Sensible Commits ‚Ä¢ Commits should be fine-grained, e.g., a bugfix, a feature,‚Ä¶ ‚Ä¢ First pull, then push. Do not force push. ‚Ä¢ Integrate into the main development branch regularly, but only tested code. ‚Ä¢ Commit messages should be descriptive. vs. git Commands \"under the hood\" You do not need to know these things for the exam, but they might be helpful when working with git. 35 Git Implementation A commit is a snapshot of the files under version control at a given time. a47c3 b325c c10b9 da985 ed489 main Index Working Directory Child commit (newer). Parent commit (older). Storage of files to go into next commit. The files you work with currently. Commit objects identified by SHA-1 hashes. Pointer to start of branch. HEAD Pointer to current branch. ‚Ä¢ HEAD~n = select n commits before newest commit. 36 git add Remember changes that are due to be stored in the repository in the next commit. a47c3 b325c c10b9 da985 ed489 main Index Working Directory Store current changes in index. HEAD 37 git commit Creates a new commit object from the content of the index that points to the previous newest commit and sets the HEAD and branch pointer to this commit. a47c3 b325c c10b9 da985 ed489 Index Working Directory 8ak29 main HEAD Branch pointer points to new commit. When files are specified. Content of index is combined in a new commit. 38 git commit -- amend The -- amend option replaces the previous commit. Intention: Committed too much, too few, the wrong things,‚Ä¶ a47c3 b325c c10b9 da985 ed489 Index Working Directory 8ak29 Creates a new commit that points to the same commit that the previously newest commit points to and sets the branch pointer accordingly. main HEAD 39 git push Current state of local repository is loaded to the remote repository. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD Remote 40 git fetch Fetch loads the current state of the remote repository for all tracked branches and information about untracked branches. a47c3 b325c c10b9 da985 ed489 main Index Working Directory Index and working directory are unaffected. HEAD 3kf92 01kd9 Remote 41 git pull Pull is a fetch + merge. The changes loaded from remote are also merged with the current state in the working directory and index. a47c3 b325c c10b9 da985 ed489 main Index Working Directory Working directory changed. HEAD 3kf92 01kd9 Remote 42 Branch, Checkout, Merge Typical process: 1. Create branch. 2. Switch to the branch. 3. Implement functionalities in multiple commits. 4. Merge back. We can merge arbitrary branches. To do so,‚Ä¶ ‚Ä¢ Switch to target branch via git checkout ‚Ä¢ Merge the source branch into it via git merge 43 git branch A branch is a sequence of commits. A branch is implemented as a pointer to the latest commit of this sequence. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev Branching creates a new branch pointer on the newest commit of the current branch. It does not yet check the new branch out! 44 git checkout branch Checking out a branch changes the HEAD to point to the desired branch. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev Checkout sets the HEAD to point to the selected branch. State in branch overrides Index and Working Directory. 45 git commit on Branch Committing on a branch works the usual way and leaves the former branch (that the current one branched off of) as is. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev fj393 46 git branch -d Deletes the specified branch. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD fj393 47 git commit on Branch Committing on the former branch then leads to the parallel structure. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev fj393 ed489 48 git merge Fast-Forward If the target branch is a subset of the source branch (there is no newer commits on the target branch after the split point), then we can fast-forward merge both branches. a47c3 b325c c10b9 da985 ed489 Index Working Directory HEAD dev fj393 main 49 git merge Merging two branches creates a merge commit in the current branch that point to two parent commits. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev fj393 lwo6s ed489 50 Branches co-exist after Merging Merging a branch neither means that the branch does not exist anymore, nor does it move the original's pointer. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev fj393 lwo6s ed489 93kfi3 s03lg7 w04lt7 51 git rebase Rebase, as an alternative to merge commits, does not create a new merge commit but append all commits of the source branch to the target branch one-on-one, and move the branches pointer. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD devfj393 lwo6s fj393 lwo6s 52 git rebase Rebasing loses the information of parallel development and causes duplications. 10b9 da985 ed489 maindev fj393 lwo6s fj393 lwo6s fj393 lwo6s fj393 lwo6s fj393 lwo6s feat1 ‚Ä¶ HEAD 53 git diff git diff can be used to view differences. a47c3 b325c c10b9 da985 ed489 main Index Working Directory HEAD dev git diff git diff HEAD git diff --cached git diff da985 b325c git diff dev 54 Kind of Undos in git ‚Ä¢ Drop changes in working directory. ‚Ä¢ Remove changes from index. ‚Ä¢ Drop commits. ‚Ä¢ Mixings of the former. 55 git checkout commit [paths] Set content of working directory to content of specified commit. a47c3 b325c c10b9 da985 ed489 main Index Working Directory If commit is specified. HEAD If no commit is specified. 56 git reset [--option] commit Moves branch pointer and HEAD to specified commit. a47c3 b325c c10b9 da985 ed489 Index Working Directory main HEAD -- mixed or none specified (includes -- soft). -- hard (includes -- mixed) -- soft 57 Other Git Commands Git status: list status of files in index and which are not tracked yet. Git branch (nothing more): list branches. Git log: show all commits in current branch. Git remote add <alias> <path>: Add a remote repository. Git stash: Save current modifications before changing branches ‚Ä¢ Git stash pop: get top-most changes back. ‚Ä¢ Git stash drop: Remove top-most changes. ‚ÄûIt is easy to shoot your foot off with git, but also easy to revert to a previous foot and merge it with your current leg.‚Äú - Jack William Bell","libVersion":"0.2.4","langs":""}