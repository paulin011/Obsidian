{"path":"Alte semester/Images/Tag3_02-GrundlagenSichererSoftwareentwicklung_Printversion.pdf","text":"Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 1 Informationssicherheit und IT-Forensik 3-02 – Grundlagen sicherer Softwareentwicklung Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 2 Grundlagen ▪ Verstehen, dass Informationssicherheit bereits zu Beginn der Entwicklung eines neuen Systems (z.B. einer Anwendungssoftware) fester Bestandteil des Entwicklungsprojektes sein muss ▪ Verstehen, dass spätere Änderungen teurer/aufwändiger sind, als die frühestmögliche Berücksichtigung in der Architektur ▪ Die Grundkonzepte des Security Engineering verstehen, erklären und anwenden können Lernziele dieser Einheit Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 3 Grundlagen ▪ „I conclude that there are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult.” Tony Hoare, Dankesrede für den Turingpreis, 1980 Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 4 Security Engineering ▪ „Security engineering is about building systems to remain dependable in the face of malice, error, or mischance. As a discipline, it focuses on the tools, processes, and method needed to design, implement, and test complete systems, and to adapt existing systems as their environment evolves.“ Ross Anderson, Security Engineering, Second Edition, S. 3 ▪ Grundsätzliche Gefahr in der Softwareentwicklung liegt also darin, die falschen Dinge zu schützen, oder die richtigen Dinge mit falschen Mitteln Definition Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 5 Security Engineering ▪ Nach Anderson müssen für gutes Security Engineering vier Bereiche zusammenspielen, bzw. diese interagieren − Policy o was muss/soll erreicht werden − Mechanism o Technik/Algorithmen/Modelle, die zur Verfügung stehen − Assurance o Grad an Vertrauen in die jeweilige Technik − Incentives o Angreifer o Betreiber/Betreuer Framework von Ross Anderson (Security Engineering, S. 5) Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 6 Security Engineering 1. Threat Model 2. Security Policy − Statement oder Dokument mit Aussagen, die die Schutzstrategie eines Systems definieren − Beispiel (schon fast zu spezifisch): „Zugriff auf den zentralen Datenbankhost darf nur von zwei Administratoren gleichzeitig erfolgen. Jeder darf nur eine Hälfte des Passwortes kennen und muss diese beim Login so eingeben, dass der andere keine Kenntnis erlangen kann“ − Beispiel: „Das System muss fail-safe sein, es darf zu keiner Zeit für irgendwen (außer dem Administrator X) Zugriff auf die Entwicklungsdaten im Klartext geben“ 3. Security Mechanisms Top-Down-Vorgehen Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 7 Security Engineering ▪ „A vulnerability is a property of a system or its environment which, in conjunction with an internal or external threat, can lead to a security failure, which is a breach of the system‘s security policy.“ Ross Anderson, Security Engineering, 2008, S. 15 ▪ Threat Modeling: Prozess der Bedrohungsanalyse, der bereits in der Design-Phase eines Software-/Entwicklungs-Projektes stattfindet Threat Modeling Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 8 Security Engineering ▪ Aktivitäten z.B.: − Datenflussdiagramm o Alle Datenflüsse erfassen und strukturieren − Zu schützende Ressourcen identifizieren und strukturieren − Fault Tree Analysis o Wurzel: ein unerwünschtes Verhalten/Ergebnis/Zustand o Knoten: Ursachen/Abstrahierte Gruppen (z.B. „Insiderangriff“) o Blätter: Ursachen o Jedem Element anschließend Wahrscheinlichkeit/Bedingungen zuweisen − Mitigation ▪ Threat Tree: Threat Modeling Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 9 Security Engineering ▪ Gute Quelle für Praxis-Know-How: − https://www.owasp.org/index.php/Application_Threat_Modeling Threat Modeling Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 10 Security Engineering ▪ Security Requirements Engineering nimmt bewusst auch die Angreiferperspektive ein ▪ Liefert als Ergebnis auch eine Grundlage für spätere Evaluation (SOLL/IST) ▪ Muss Teil des allgemeinen Requirements Engineering sein, oder zumindest eng aufeinander abgestimmt ▪ Dazu gibt es verschiedene Methoden, etwa „CLASP“ und „SQUARE“ ▪ Quelle z.B.: https://www.us-cert.gov/bsi/articles/best-practices/requirements- engineering/security-requirements-engineering Requirements Engineering, Security Requirements Engineering Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 11 Security Engineering ▪ In der Regel unterliegen jegliche Anpassungen der Systeme einem umfassenden Veränderungs-Management (Change Management) ▪ Ziel ist es, die Anpassungen zu dokumentieren und zu kontrollieren um problematische und fehlerhafte Auswirkungen einer Anpassung möglichst auszuschließen bzw. rückgängig zu machen Change Management Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 12 Security Engineering ▪ Anwendungskontrollen sind spezifische Kontrollen für betriebswirtschaftliche Anwendungen ▪ Beinhalten manuelle und automatische Prozeduren ▪ Klassifikation: − Eingabekontrollen o Maßnahmen zur Überprüfung von Daten bei der Eingabe in das IT-System hinsichtlich Genauigkeit und Vollständigkeit. − Verarbeitungskontrollen o Routinen, die sicherstellen, dass die Daten bei der Verarbeitung vollständig und genau sind. − Ausgabekontrollen o Maßnahmen, die sicherstellen, dass die Ergebnisse der durch den Computer durchgeführten Verarbeitung genau und vollständig sind sowie richtig verteilt werden. Allgemeine Kontrollen: Anwendungskontrollen Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 13 Security Engineering Allgemeine Kontrollen: Anwendungskontrollen Quelle: Laudon/Laudon/Schoder (2015), Tabelle 15.10 Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 14 Security Engineering ▪ IT-Systeme, die zusätzliche, zumeist redundante Hardware-, Software und Stromversorgungs-komponenten verwenden, um eine unterbrechungsfreie Verfügbarkeit der Systeme zu gewährleisten. Definition: Fehlertolerante Computersysteme Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 15 Security Engineering ▪ Functional Safety ▪ „Functional safety is a concept applicable across all industry sectors. It is fundamental to the enabling of complex technology used for safety-related systems. It provides the assurance that the safety-related systems will offer the necessary risk reduction required to achieve safety for the equipment.” ▪ Quelle: https://www.iec.ch/functionalsafety/ ▪ Adressiert insbesondere bereits die Entwicklungsphase sicherheitskritischer Anwendungen ▪ Bezieht sich u.a. auf den aktuellen Stand der Technik ▪ Lebenszyklus-Modell IEC 61508 Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 16 Security Engineering Probleme der Systemqualität: Software und Daten Quelle: Laudon/Laudon/Schoder (2010), Abbildung 15.7 Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 17 Security Engineering ▪ Es ist fast unmöglich, alle Fehler in großen Programmen zu beseitigen und deren Ernsthaftigkeit ist unbekannt ▪ Hauptfehlerursache ist die Komplexität des Codes ▪ Validierung: Wurde das richtige System gebaut? ▪ Verifikation: Wurde das System richtig gebaut? ▪ Aufgabe des Testens erfordert Experten ▪ Andere Fehlerarten: provozierte Fehler (buffer overflow), falsche Werkzeuge Programmfehler Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 18 Security Engineering Typische Fehler bei der Einführung und dem Betrieb von Software Quelle: Laudon/Laudon/Schoder (2010), Abbildung 15.7 Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 19 Security Engineering Wartungsalbtraum ▪ In den meisten Unternehmen wird fast die Hälfte der Zeit des für Informationssysteme zuständigen Personals für die Wartung und den Betrieb vorhandener Systeme aufgewendet (Run-the-IT-costs versus Change-the-IT-costs) ▪ Gründe: − Anpassung an Änderungen im Unternehmen − Komplexität der Software − Fehlerhafte Systemanalyse und Entwurf − Vielfalt verschiedener Systeme Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 20 Security Engineering Kostenaufwand für Fehler im Systementwicklungszyklus Quelle: Laudon/Laudon/Schoder (2015), Abbildung 15.2 Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 21 Security Engineering Einsatz von Kryptografie im Unternehmen ▪ Unternehmensspezifische Entscheidungen − Wie sensibel sind die Daten? − Wie lange ist der Inhalt geheim zu halten? − Geht es um gespeicherte (data at rest) oder übertragene (data in transit) Daten, deren Vertraulichkeit zu schützen ist? − Sind die Daten aufgrund von firmeneigenen oder regulatorischen Vorgaben zu schützen? − Wie sicher ist die Umgebung, in der die Verschlüsselung stattfindet? − Soll Hardware- oder Softwareverschlüsselung angewandt werden? − Müssen die Implementierungen zertifiziert sein? − Muss die Verschlüsselung Ende-zu-Ende oder „nur“ von Tür-zu-Tür erfolgen? ▪ Unternehmen müssen verstehen, wie man Kryptografie implementiert und betreibt Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 22 Security Engineering Allgemeine Konstruktionsprinzipien (nach Claudia Eckert, S. 184f, 9. Auflage) ▪ Erlaubnisprinzip (fail-safe defaults, default deny) ▪ Vollständigkeitsprinzip (complete mediation) − Jeder Zugriff muss auf dessen Zulässigkeit hin geprüft werden ▪ Prinzip der minimalen Rechte (need-to-know) ▪ Prinzip der Benutzerakzeptanz (economy of mechanism) ▪ Prinzip des offenen Entwurfs (open design) − Kein Security by Obscurity ▪ In der Praxis denkbar: Zonen-Modell − Z.B. besonders sicherer Kern − Weniger sichere, weniger privilegierte Bereiche „drum herum“ Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 23 Security Engineering ▪ BSI-Standard 200-3: Risikoanalyse auf der Basis von IT-Grundschutz ▪ Nach BSI dann anzuwenden, wenn Sicherheits- anforderungen über ein normales Maß hinausgehen ▪ Quelle: https://www.bsi.bund.de/DE/Themen/Unte rnehmen-und-Organisationen/Standards- und-Zertifizierung/IT-Grundschutz/BSI- Standards/BSI-Standard-200-3- Risikomanagement/bsi-standard-200-3- risikomanagement_node.html BSI-Risikoanalyse Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 24 Security Engineering ▪ Von Microsoft (auch) für eigene Verwendung entwickelt ▪ Drei Paradigmen: − Secure by Design − Secure by Default − Secure in Deployment ▪ Quelle: https://www.microsoft.com/en-us/securityengineering/sdl/ und Quelle Grafik https://social.technet.microsoft.com/wiki/contents/articles/7100.the-security-development- lifecycle.aspx Security Development Lifecycle (SDL) Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 25 Exkurs: Sicherheit in Programmiersprachen ▪ „[B]y far the most popular and best established lightweight formal methods are type systems […] A type system is a tractable syntactic method for proving the absence of certain program behaviors […].“ - Benjamin C. Pierce, „Types and Programming Languages“ ▪ Typisierung ist ein eigenes Thema für sich (schwach, stark, statisch, dynamisch, …) ▪ Von Typsicherheit spricht man, wenn keine Operation in der Programmiersprache es erlaubt, die Regeln des Typsystems zu verletzen. ▪ Beispiel: eine typsichere Sprache verhindert, dass außerhalb der Grenzen eines Arrays gelesen oder geschrieben wird, denn dieser Speicherbereich ist undefiniert und entspricht nicht dem definierten Typ des Arrays -> in C ist dies möglich, da C nicht typsicher ist Typsicherheit Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 26 Exkurs: Sicherheit in Programmiersprachen ▪ Variante 1: manuelles Speichermanagement (klassischer Vertreter: C) ▪ Variante 2: automatisches Speichermanagement durch einen Garbage Collector (Python, Perl, Java, C#, …) ▪ Neben diversen anderen Punkten hat Garbage Collection auch einen Sicherheitsaspekt: ▪ Bestimmte Fehlerklassen wie Use-after-Free oder Double-free-Bugs werden systematisch verhindert − Durch steigende Sicherheitsmechanismen gegen „klassische“ Programmierfehler wie Buffer Overflows gehören diese Fehlerklassen mit zu den wichtigsten Quellen für moderne Exploits, etwa in Webbrowsern ▪ „Sichere“ Programmiersprachen können auch ohne Garbage Collection arbeiten (vgl. Rust) Garbage Collection: Wie kann ein Computerprogramm Speicher verwalten? Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 27 Exkurs: Sicherheit in Programmiersprachen ▪ Für alle Konzepte ist noch keine Lösung gefunden (z.B. können in Rust Bereiche explizit als „unsafe“ markiert werden) ▪ Zahlreiche Schnittstellen existieren (z.B. können in Android- Apps [Java-basiert] Teile in „native code“ [C-basiert] programmiert werden) ▪ Keine sichere Programmiersprache verhindert, dass der Programmierer Fehler in der Businesslogik macht: ▪ Wenn ein Softwareprodukt für Automobilhändler 1€ als Verkaufspreis für einen neuen BMW akzeptiert, hilft auch die sicherste Programmiersprache nicht dabei, diesen wirtschaftlichen Schaden zu verhindern. Fazit: Sind typ- und speichersichere Programmiersprachen die Lösung aller Probleme? Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 28 Exkurs: Formale Korrektheitsbeweise ▪ Ein sehr kluges System, um die Korrektheit von Software beweisen zu können ▪ Ist jedoch nicht für jegliche Software beliebigen Umfangs geeignet ▪ Quelle: Charles Antony Richard Hoare: An Axiomatic Basis for Computer Programming, In: Communications of the ACM. Bd. 12, Nr. 10, 1969, S. 576–585 ▪ Was, wenn später der Compiler einen Fehler macht? ▪ Was, wenn die Annahmen fehlerhaft sind? Hoare-Kalkül Informationssicherheit und IT-Forensik | Einheit 3-02 | Dipl.-Wirt.-Inf. Martin Wundram – martin@wundram.de | Inhalte z.T von DigiTrace GmbH bereitgestellt 29 Ein Auftrag an Sie: unser Musterfall ▪ Überarbeiten Sie Ihre Planung für die Errichtung einer „smarten“ Einbruchmeldeanlage 2.0 für das Handwerksunternehmen Ihrer Eltern ▪ Nehmen Sie sich dafür jetzt 5 Minuten Zeit ▪ Beantworten und begründen Sie unter eigenen Annahmen z.B. folgende Fragen: − Ändern Sie Ihre bisherige Planung? − Denken Sie kurz darüber nach, wie Sie den Entwicklungsprozess für die Software der Einbruchmeldeanlage gestalten wollen. Welche Programmiersprache erscheint Ihnen warum geeignet? Welche Bedrohungen wollen Sie bereits im Design des Systems adressieren? − Skizzieren Sie mögliche Problemstellen. Wo könnten Probleme lauern? Wiederkehrende, vorlesungs- und übungsbegleitende Übungsaufgabe","libVersion":"0.3.2","langs":""}