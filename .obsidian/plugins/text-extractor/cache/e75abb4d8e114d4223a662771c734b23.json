{"path":"Statistik/Softwaretechnik/Lectures/14_SEforWebApps I.pdf","text":"Software Engineering SE for Web Applications I: Backend Software & Systems Engineering | Prof. Dr. Andreas Vogelsang | 27.11.2023 @andivogelsang vogelsang@cs.uni-koeln.de Learning Goals for Today ▪ Know how the Internet works (on a very basic level) ▪ Know what HTTP is and how to request resources from servers ▪ Know architectures for web applications ▪ Know what a web server is and what backend abstractions it offers 2 SE for Web Applications – Why? 3 Web Applications A web application (or web app) is application software that runs on a web server, unlike computer- based software programs that are run locally on the operating system (OS) of the device. Web applications are accessed by the user through a web browser with an active network connection. These applications are programmed using a client– server modeled structure—the user (“client”) is provided services through a server. Where is the server? • The server may be reached via the Internet, the intranet, or even on the same machine • Web applications represent a general concept of system design – not just for the Internet. Advantages of Web Applications Runs in a browser • Portability • No local installation needed Hosted on a server • SW can be managed centrally (updates, maintenance, scalability) Use of “web technology” • Highly interoperable with other systems • Based on well-defined standards Disadvantages of Web Applications Web technology originally made for static content → limited support for interactive applicationsThe Internet and HTTP What is the Internet? 5 The Internet The Internet is the global system of interconnected computer networks that uses the Internet protocol suite (TCP/IP) to link devices worldwide. Important Concepts • TCP (Transmission Control Protocol): connection- oriented protocol; Establishes a point-to-point connection between two entities in the network • IP (Internet Protocol): principal communications protocol on the internet; Delivers packets of data across network boundaries • IP Address: numerical label assigned to devices in a network that use the internet protocol to communicate with other devices High Level Web Overview 6 Client www.google.de → 142.250.179.131 Domain Name System (DNS) Translating hostname to IP address Server Browser Other Server Other Devices Proxies HTTP (Hyper Text Transfer Protocol) HTTP Request HTTP Response Servers • Wait for requests • They serve web resources Multiple Proxies on the way Try traceroute www.google.de HTTP Overview 7 Hyper Text Transfer Protocol (HTTP) • Builds upon TCP/IP • Synchronous request-response protocol • Client (web browser) sends request • Web server replies with appropriate answer (could also be an error) • “Stateless” protocol • Each request-response pair is independent • No permanent connection between server and browser (allows for a high number of users per server) • Proxies mediate between browser and server (caching, filtering, etc.) • In HTTP everything is sent and received as clear text • Use HTTPS: HTTP over a secured (TLS) connection Proxies HTTP (Hyper Text Transfer Protocol) HTTP Request HTTP Response HTTP Resources and URL 8 HTTP resource • Abstract concept for nodes in hypertext (e.g., HTML files, documents, images) • Data types defined by MIME (RFC 2045): \"text/html\", \"image/png\", “application/xml“, etc. Uniform Resource Locator (URL) • Standardized way of identification and addressing of any resource on the internet • Subtype of Uniform Resource Identifier (URI) URL Syntax <scheme>://[<user>[:<password>]@]<server>[:<port>]/[<path>][?<query>][#<fragment>] https://usr:pwd@bookStore.de:3000/articles/books?year=1984#novels URL Syntax Scheme: Protocol to be used when connecting to a server: http(s), ftp, mongodb, etc. User/Password: Optional: Credentials to access a protected resource Server: Domain name or IP address of the server URL Syntax Port: Port at which the server is listening for requests Path: Local path to resource on a server Query: Parameters that can be passed to the sever Fragment: Name of an entity within the resource. This is only used by clients HTTP Request 9 HTTP Request • Refers to a certain resource (identified by its URL) • Contains a certain type (“method”): Most common methods for access: GET, POST, PUT • Can contain request metadata (headers) • Target host, User authentication, Cookies, etc. • Can contain application metadata, e.g., • Preferred data type and language (for GET, POST) • Content Negotiation (e.g., HTML, JSON) • Data type of the body (for POST, PUT) • Can contain application data (“body”), e.g., the data of a form (POST, PUT) GET /doc/test.html HTTP/1.1 Host: www.test101.com Accept: image/gif, image/jpg, */* Accept-Language: en-us Accept-encoding: gzip, deflate User-Agent: Mozilla/4.0 Content-Length: 35 bookID=1234&author=Roy+Fielding http://www.test101.com/doc/test.html? bookID=1234&author=Roy+FieldingHTTP Request Method 10 HTTP Request Method • Each access to a resource has a certain request type (“method”) • GET: request a resource, only retrieves data • POST: submit data to a resource • Data is included in body of the request • May result in creation of new resource or update of existing resource • PUT: replaces target resource with sent payload • DELETE: delete a resource • PATCH: provides a set of instructions to modify the target resource • OPTIONS, TRACE, HEAD, CONNECT: access to the metadata of the servers, the Internet connection, the resource, etc. Request Method Properties • GET: Safe and Repeatable (expect no side effects) • Expect side effects for POST, PUT, DELETE, PATCH • PUT, DELETE: Idempotent (expect same effect even with multiple executions) HTTP Response 11 HTTP Response • Always follows a request message • Contains a status code • Can contain response metadata, e.g.: • Server, TCP connection state, date • Can contain application metadata, e.g.: • Data type and encoding of the application data • Caching possibilities and expiring date • Current URL of a transferred resource (for GET) • Can contain application data (“body”) Response Status Codes • 1xx: Informational (e.g., 101 Switching) • 2xx: Success (e.g., 200 OK) • 3xx: Redirect (e.g., 301 Permanent) • 4xx: Client Error (e.g., 404 Not Found) • 5xx: Server Error (e.g., 500 Internal Server Error) HTTP/1.1 200 OK Date: Sun, 08 Feb xxxx 01:12:12 GMT Server: Apache/1.3.29 (Win32) Last-Modified: Sat, 07 Feb xxxx Content-Type: text/html Content-Length: 35 <h1> My Home page</h1> RESTful APIs 12 From HTTP to REST • HTTP-like communication became so popular that a new API style emerged from it: RESTful APIs • API (application programming interface): An API is an interface for Machine-to-Machine communication • RESTful APIs are frequently used when independent applications need to communicate with each other (not only web clients with web servers) 6 Constraints of RESTful APIs • Client-server architecture: RESTful systems separate processing and storing data (server) from collecting, requesting, and presenting the data (client) • Statelessness: Responsibility for managing state (e.g., logged in or not) is on the client • Cacheability: Data may be temporarily stored by client and server to avoid redundant requests. • Layered System: A client cannot tell whether it is connected directly to an end server or to an intermediary. • Code on demand (optional): A sever can temporarily extend the functionality of a client by transferring executable code • Uniform interface: resource identification and manipulation, self- descriptive messages RESTful APIs • Everything a server has to offer is a resource • Resources are identified by global IDs (URIs) • A client can request or change a resource • The HTTP standard methods (GET, POST,…) are used as the uniform interface for all API calls. Traditional Web Applications Client ServerGET /the-resource ... 200 OK <html>Code...</html> Displays the page, then user clicks on link. GET /another-resource ... 200 OK <html>Code...</html> Displays the other page, ... Drawbacks • The client must understand both HTTP and HTML. • E.g., smartphone apps do not use HTML • The entire webpage is replaced with another one. • No way to animate transitions between webpages. • Same data is usually sent in multiple responses. • E.g., HTML code for the layout RESTful APIs? Server Id Name 1 Alice 2 Bob 3 Claire Users Client GET /users/2 ... {\"id\": 2, \"name\": \"Bob\"} Changes state. {\"id\": 2, \"name\": \"Obi\"} PUT /users/2 {\"id\": 2, \"name\": \"Obi\"} And where is the HTML? Web Server Web Server 16 Web Server Ambiguous term: 1. Hardware: A computer (“server”) connected to the internet (or any network) 2. Software: A program running on a computer/server that accepts HTTP requests over a specific port and answers with HTTP responses Web Server – Hardware • Properties of contemporary web servers • Part of large data centers • Latency is geographically dependent, so web servers are often geographically distributed (works through, e.g., DNS) • Virtual servers: Physical servers can host many virtualized (web) servers • Can also be your own computer (localhost) Web Server – Software (HTTP Server) • Makes resources accessible over a URL and HTTP/S (standard ports 80 and 433) • Starting a web server on your local computer makes it accessible over http://localhost or http://127.0.0.1 • Maps path component of URL to • static asset on the file server • dynamically rendered resources • Often incorporates some functionality for caching and session handling Web Server – Static Assets 17 Serving Static Assets from the File System • Web server automatically wraps static files with HTTP Response Headers • Static assets directly map URL path to relative part of the file system • They cannot react to other part of the request (e.g., query parameter) • MIME-Type is inferred through heuristics (e.g., file endings) • Example of common static files in web servers • HTML, CSS • JavaScript (for use in browser) • Media (Images, Video, Audio, etc.) Example • Static assets made available at path /var/www/public_html on the server • If we determine [this is configurable] http://localhost/static/js/search.js to be a request for static assets, we could return /var/www/public_html/js/search.js Web Server – Dynamic Resources 18 Dynamic Resources • Executing programs in a server-side programming language on the server • Dynamic resources can react to complete HTTP request (including header information) • Path and Query Parameters • HTTP Method (GET, POST, PUT, …) • Content Negotiation (Accept: application/json) • … • System output is treated as the complete HTTP response (including headers) • However, many programming languages offer library support for basic HTTP related functions and provide abstractions (e.g., for dealing with response headers) Web Server Examples • Apache (httpd): one of the first and most popular web servers • NginX: Similarly popular as Apache; better performance but less flexible • Node.js: WebServer based on JavaScript • Apache Tomcat: Specifically for Java backends Web Application Architectures Web App Architectures – Physical View 20 Request Response Collect data Display result Frontend Backend Frontend Client-side aka. the frontend: Code is typically written in HTML, CSS, JavaScript and stored within the browser. It’s where user interaction takes place. Backend Server-side, also known as the backend: Controls the business logic and responds to HTTP requests. The server- side code is written in Java, PHP, Ruby, Python, etc. File system Database Web server System Boundary Web App Architectures – Variants 21 One Web Server, One Database ➕Easy ➕Cheap ➖Single point of failure ➖Not easily scalable Multiple Web Servers, One Database ➕Reliable ➕Stateless Server ➖DB is single point of failure Multiple Web Servers, Multiple Databases ➕Reliable ➕Scalable ➖Complex ➖Data distributed Monolithic Architectures Service-based Architectures Microservices ➕Scalable ➕Easy to distribute ➖Dependency hell Serverless ➕No need to maintain servers ➕Scalable ➖Hard to understand, maintain, and test Web App Architectures – Logical View 22 Data Code that specifies and manages application data. Frontend Backend Logic Code that handles requests by potentially invoking additional services. Presentation Code that transforms data into views. Presentation Logic Data Rich-Client vs. Thin Client Rich-Client: Parts of the logic are implemented in the frontend (e.g., data preprocessing or data validation) Thin-Client: Parts of the presentation are implemented in the backend (e.g., generation of client-specific views) 3-tier Architecture Backend Architectures – Logical View 23 Frontend Backend Model Controller ViewModel-View Controller Architecture within the backend MVC or what? The MVC pattern in the backend is well suited for thin client applications where a lot of the presentation (view) is implemented in the backend. For rich client applications, the view in the backend may be very simple (e.g., just transforming data into a JSON object) Backend Frameworks Backend Framework Abstractions 25 Web (HTTP Abstractions) General Purpose Abstraction HTTP Request Routes (URL mapping) Request Method Path Parameters Query Parameters Message Body Content- Negotiation HTTP Response Status Code Dynamic Content/ Response Content Type (MIME Type) Caching Behavior Encoding (Compression) Static Files Content Templating Environment Variables (Secret Management) Networking File System Database Access Modularization Layered Architectures Model-View-Controller Standard UtilitiesArchitecture (Code Organization) Cookies and Sessions Backend FW Abstractions – HTTP Req/Res 26 Java/Spring Node.js/Express app.get(‘/:id’, (req, res)=>{ const bookId = req.params.id; const book = Books.find(bookID); res.status(200); res.send(book); }); GET /bookStore/1 HTTP/1.1 Host: www.test101.com http://www.test101.com/bookStore/1 HTTP/1.1 200 OK Date: Sun, 08 Feb xxxx 01:12:12 GMT Content-Type: application/json {\"name\": \"Book1\",\"author\": \"Albert Camus\",\"year\": 1900,\"price\": 20.95} Backend FW Abstractions – HTTP Req/Res 27 Java/Spring Backend FW Abstractions – Templating 28 Java/Spring/FreeMarker Templating Templates (sometimes also called views) provide separation between program logic and output. Template engines replace variables in static template files and control structures (conditionals and loops) with values passed from the program. <div> <table class=\"datatable\"> <tr> <th>Company</th> <th>Type</th> </tr> <#list model[\"carList\"] as car> <tr> <td>${car.company}</td> <td>${car.type}</td> </tr> </#list> </table> </div> index.ftl Company Type VW Golf Daimler C-Class Summary 29 SE for Web Applications I • Web applications are an interoperable, easily manageable way to develop software applications • Web applications rely on web technology (esp. HTTP) • Client-Server Architecture • Backend captures business logic, data handling, and sometimes also views.","libVersion":"0.3.1","langs":""}