{"path":"Alte semester/Softwaretechnik/Lectures/16_QA+Testing I.pdf","text":"Software Engineering QA + Testing I Software & Systems Engineering | Prof. Dr. Andreas Vogelsang | 04.12.2023 @andivogelsang vogelsang@cs.uni-koeln.de Learning Goals for Today ▪ Know what Quality Assurance is and what qualities of software need to be ensured ▪ Know the general strategies to quality assurance ▪ Know what code review is and how to apply it ▪ Know what testing is, what its main goal is, what types of testing exist 2Software Quality and its Assurance Andy Hunt “No one in the brief history of computing has ever written a piece of perfect software. It’s unlikely that you’ll be the first.” Donald Trump (May 2020) “If we didn’t do any testing, we would have very few cases.” Software Quality 5 Quality [Ludewig and Lichter] Quality is the entirety of properties and characteristics of a product or process that indicate adequacy with respect to given requirements. Quality Assurance [Ludewig and Lichter] Quality assurance are all activities with the goal to improve the quality. Expectations on Quality [Sommerville] “Because of their previous experiences with buggy, unreliable software, users sometimes have low expectations of software quality. They are not surprised when their software fails. When a new system is installed, users may tolerate failures because the benefits of use outweigh the costs of failure recovery. However, as a software product becomes more established, users expect it to become more reliable. […] If a software product or app is very cheap, users may be willing to tolerate a lower level of reliability. […] Customers may be willing to accept the software, irrespective of problems, because the costs of not using the software are greater than the costs of working around the problems.” Product Quality [ISO/IEC 25010] 6 Quality in Use [ISO/IEC 25010] 7 Quality in Use Effectiveness Efficiency Satisfaction Freedom from Risk Context Coverage Usefulness Trust Pleasure Comfort Economic Risk Mitigation Health and Safety Risk Mitigation Environmental Risk Mitigation Context Completeness Flexibility Quality Assurance [Ludewig and Lichter] 8 Quality Assurance Measures Constructive Measures Analytical Measures Organizational Measures Coding Guidelines Analysis (Static) Execution (Dynamic) Software Project Management Compilation Code Review Black-box Testing White-box Testing Terminology: Errors, Faults, and Failures 9 Avizienis, A. and Laprie, J.C. and Randell, B. and Landwehr, C.: Basic concepts and taxonomy of dependable and secure computing, IEEE Transactions on Dependable and Secure Computing, 2004 Failure Error Fault causes Deviation from specified behavior (internal) Cause for an error Deviation from desired behavior at the system interface (external) may lead to Code Review Code Reviews Code Reviews Idea: improve quality by asking other programmers for feedback. Typically applied with a quality checklist Quality criteria: functionality, comprehensibility, maintainability, coding guidelines, design patterns, … Reviewer selection: based on familiarity with code, availability, expertise Remarks • Cannot be done by yourself • Reviewers need programming experience and knowledge of the code (mutual feedback) • Feedback should be timely and constructive • Only changes reviewed, not too many Reasons for Code Reviews ▪ Find bugs ▪ Low-level and High-level Bugs ▪ Bugs in requirements, architecture, code ▪ Quality bugs (Security/Performance/…) ▪ Improve code ▪ Readability, formatting, comments, consistency, naming ▪ Enforce coding standards ▪ Discuss alternative solutions ▪ Transfer knowledge ▪ Learn about API usage, available libraries, best practices, code conventions, system design, “tricks”, … ▪ “Train“ developers 12 Bacchelli, Alberto, and Christian Bird. \"Expectations, outcomes, and challenges of modern code review.\" International Conference on Software Engineering. IEEE Press, 2013. Reasons for Code Reviews (continued) ▪ Awareness and transparency ▪ Changes are double-checked ▪ Changes are announced ▪ General awareness of changes and new features ▪ Shared code ownership ▪ Common understanding of larger parts of the code ▪ Openness w.r.t. feedback and change requests ▪ Developers don’t see their code as “their baby” 13 Bacchelli, Alberto, and Christian Bird. \"Expectations, outcomes, and challenges of modern code review.\" International Conference on Software Engineering. IEEE Press, 2013. Code Reviews at Microsoft 14 Bacchelli, Alberto, and Christian Bird. \"Expectations, outcomes, and challenges of modern code review.\"International Conference on Software Engineering. IEEE Press, 2013. Findings in Code Reviews at Microsoft 15-313 Software Engineering 15 Bacchelli, Alberto, and Christian Bird. \"Expectations, outcomes, and challenges of modern code review.\"International Conference on Software Engineering. IEEE Press, 2013. 200 reviews with 570 findings Different Types of Code Reviews 16 “Modern“ Code Review • Lightweight, tool-based code review • Review of every code change • Asynchronous process • Usually only one reviewer but open to everyone • Part of the “definition of done” Formal Code Inspection • Predefined and structured process • Review initiated based on releases • Synchronous process (review meeting) • Different roles: Moderator, several reviewers,… • Explicitly planned in the project plan Modern Code Reviews 17 Let’s implement a new feature OK, I think my code is ready now. @Betty: Can you have a look? Sure. Let’s see… Here are my comments. Great, thanks. Better now? Awesome. I’ll approve the merge. Azure DevOps (Team Foundation VC) 1815-313 Software Engineering 19https://help.github.com/articles/using-pull-requests/ Formal Inspection (aka Fagan Inspection) ▪ Idea popularized in 70s at IBM ▪ Broadly adopted in 80s, much research ▪ Sometimes replacing component testing ▪ Group of developers meet to formally review code or other artifacts ▪ Most effective approach to find bugs ▪ Typically, 60-90% of bugs found with inspections ▪ Expensive and labor-intensive 20 Inspection Process 21 Planning Overview Preparati on Meeting Rework Follow-up Moderator Author Reviewers Inspection Speed ▪ More than 400 LOC/h make reviews shallow ▪ Recommendation: <400 LOC for a 1h inspection meeting. 22 Code Review Checklists 23 https://github.com/mgreiler/code-review-checklist Social Aspects of Code Reviews ▪ Be aware: Author’s self-worth is probably in the code ▪ Do not criticize authors ▪ “you didn’t initialize variable a” → “I don’t see where variable a is initialized” ▪ Meetings should not include management (it’s a peer review) ▪ Do not use review results for HR evaluation ▪ “finding more than 5 bugs during inspection counts against the author” ▪ Leads to avoidance, fragmented submission, not pointing out defects, holding pre-reviews 24 Dos and Don‘ts in Code Review As a review receiver (author) ▪ Don’t rely solely on reviewers; review your code first (incl. testing) ▪ Don’t take feedback personally, do embrace feedback ▪ Don’t “defend” your code ▪ Do address all comments ▪ Do decide how to resolve faults 25 Dos and Don‘ts in Code Review As a reviewer ▪ First of all, be polite and constructive ▪ Do get an understanding about the code’s context ▪ what is it about? ▪ what belongs to the code under review (code, tests, configurations, documentation)? ▪ is there a related issue/specification/discussion? ▪ Do try to run the code; don’t just look at the code without testing it. ▪ Don’t discuss style if there are no guidelines ▪ Do highlight the good parts of the code as well, not only the mistakes ▪ Don’t blindly accept code from more experienced developers; do ask for clarification if you don’t understand things ▪ Don’t “show off” that you are are better/smarter ▪ Do provide the review quick 26Software Testing Software Testing 28 Software Testing [Sommerville] Testing is intended to show that a program does what it is intended to do and to discover program defects before it is put into use. Validation Testing [Sommerville] Demonstrate to the developer and the customer that the software meets its requirements. V&V [Boehm1979] Validation: Are we building the right product? Verification: Are we building the product right? Defect Testing (Verification) [Sommerville] Find inputs or input sequences where the behavior of the software is incorrect, undesirable, or does not conform to its specification. Kinds of Software Testing 29 Stages of Testing [Sommerville] Development testing, where the system is tested during development to discover bugs and defects Release testing, where a separate testing team tests a complete version of the system before it is released to users User testing, where users or potential users of a system test the system in their own environment Manual vs. automated testing [Sommerville] In manual testing, a tester runs the program with some test data and compares the results to their expectations. [...] In automated testing, the tests are encoded in a program that is run each time the system under development is to be tested. Testing Levels Unit testing: test specific lines of code (a unit) Integration testing: test integrated components System testing: test entire system Acceptance testing: check compliance with business goals Test Cases (Testfälle) 30 Systematic Test [Ludewig and Lichter] A systematic test is a test, in which 1. the setup is defined, 2. the inputs are chosen systematically, 3. the results are documented and evaluated by criteria being defined prior to the test. Exhaustive Testing in Practice? boolean a, b, c; int i, j; bla(a,b,c) has 23 = 8 possible inputs blub(i,j) has (232)2 = 264 ≈ 1019 inputs • assuming 109 test cases can be executed in 1 second (cf. CPU with more than 1 GHz) • exhaustive test of blub takes ≈ 585 years • testing for a day would cover less than 0.0005 % of the inputs How to test thousands of such methods several times a day? Test Case [Ludewig and Lichter] In a test, a number of test cases are executed, whereas each test case consists input values for a single execution and expected outputs. An exhaustive test is a test in which the test cases exercise all the possible inputs.Edsger W. Dijkstra (1972) “Program testing can be a very effective way to show the presence of bugs, but it is hopelessly inadequate for showing their absence.” Test Case Design (Testfallentwurf) 32 Goal [Ludewig and Lichter] Detect a large number of failures with a low number of test cases. An ideal test case is… [Ludewig and Lichter] • representative: represents a large number of feasible test cases • failure sensitive: has a high probability to detect a failure • non-redundant: does not check what other test cases already check Test Case Design Experience- based Structure- based Specification- based White-Box Testing Black-Box Testing","libVersion":"0.3.2","langs":""}