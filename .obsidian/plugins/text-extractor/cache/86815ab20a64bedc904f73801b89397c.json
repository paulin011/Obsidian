{"path":"Alte semester/Images/20240217_Sa_Uebung_2_Websicherheit.pdf","text":"1 Informationssicherheit und IT-Forensik – Übung – UEB-02 – Websicherheit Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 2 Bestandsaufnahme  Wie war die Einheit in der Vorlesung?  Viele neue Konzepte?  Alles verstanden? Wie sieht es aus mit:  XSS?  SQLi?  ... Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 3 Warm-Up Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 4 Warm-Up Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 5 Warm-Up Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 6 Warm-Up Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 7 Warm-Up Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 8 Warm-Up Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 9 Grundlagen Web Client Server HTTP Protokoll Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 10 Grundlagen Web  Server lauscht auf einem festen Port  80 für HTTP  443 für HTTPS  Client kann, wann immer er es möchte, versuchen, diesen Port zu kontaktieren  Dabei spricht er das HTTP-Protokoll (mit vorherigem Schlüsselaustausch bei HTTPS) Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 11 Grundlagen Web  Verschiedene Arten von Anfragen  GET  POST  HEAD, PUT, DELETE, OPTIONS, …  Wichtig sind vor allem die ersten beiden Typen  GET – „bitte gib mir Daten“  POST – „hier sind Daten für dich“ (vereinfacht dargestellt) Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 12 Grundlagen Web: Praxisbeispiel  Rufen Sie „per Hand“ eine Webseite ab  Finden Sie eine beliebige Seite mit unverschlüsseltem HTTP (gar nicht mehr so leicht heutzutage)  z.B: http://ard.de (2019) http://uni-koeln.de (2020) http://gnu.org (2021)  https://whynohttps.com hilft  http://neverssl.com  In der Kali-Kommandozeile:  Eine Verbindung mit Port 80 herstellen: nc neverssl.com 80 -Cv  HTTP sprechen:  „GET /“ eintippen, nachdem die Verbindung hergestellt wurde Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 13 Grundlagen Web: GET  https://www.portal.uni-koeln.de/searchresult.html?q=Testsuche  https:// – Protokoll  www.portal.uni-koeln.de – Host (Domain/Webseite)  /searchresult.html – Pfad  ?q=Testsuche – Parameter Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 14 Grundlagen Web: POST  POST http://example.com/login.php  Keine Logindaten als Parameter an die URL angehängt  Trotzdem werden irgendwo die Daten übertragen, denn ein Login ist erfolgreich  Lösung: user=admin&password=123456 wird als Datenteil in der Anfrage übertragen, für den Anwender „unsichtbar“ Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 15 POST: Praxisbeispiel  Öffnen Sie im Webbrowser die Entwicklertools (F12)  Klicken Sie auf Netzwerkanalyse / Network  Senden Sie im Webbrowser ein Formular ab  z.B. im VPN unter http://matrix.seiberkreim.com  Untersuchen Sie die gesendeten Daten Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 16 Grundlagen Web: HTML, CSS, JS Die Grundausstattung einer Webseite  HTML  Textauszeichnungssprache (vergleichbar zu z.B. LaTeX, Markdown)  <h1>Text</h1> – der Text stellt eine Überschrift dar  <p>Text</p> – der Text ist ein einzelner Absatz  <a>Text</a> – der Text ist eine Verlinkung (ein „Anker“) Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 17 Grundlagen Web: HTML, CSS, JS Die Grundausstattung einer Webseite  CSS  Regelt die optische Gestaltung von Webseiten  z.B.: Eine Überschrift soll in Schriftgröße 22 und fett dargestellt werden  Hier lauern schon die ersten Probleme, da CSS eine sehr mächtige Designsprache ist, es gibt fortgeschrittene Webangriffe auf CSS-Basis Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 18 Grundlagen Web: HTML, CSS, JS Die Grundausstattung einer Webseite  JavaScript  Statische HTML+CSS-Webseiten sind nicht modern und interaktiv genug  clientseitig Code ausführen: Die Webanwendung von einer Textseite zu einem interaktiven Programm machen  „wenn der Nutzer mit der Maus über diesen Knopf fährt, färbe ihn grau ein“  „wenn der Nutzer eine monoalphabetische Substitution durchführen will, schicke seinen Text nicht an den Server, sondern verschlüssele das direkt im Webbrowser  „I built a role playing game in JavaScript. You can, too. Here’s how.“ https://www.freecodecamp.org/news/learning-javascript-by-making-a-game- 4aca51ad9030/ Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 19 Grundlagen Web: PHP  Möchte man nicht nur statische Webseiten ausliefern, sondern interaktiv auf die Eingaben des Anwenders reagieren, benötigt man auf der Seite des Webservers Programmcode, der beim Aufruf der Webseite ausgeführt wird  Klassischerweise benutzt man dafür PHP, aber auch C-Programme, Java- Applets, Python-Skripte, nodeJS, Ruby, … können über das Web erreichbar gemacht werden  Übertragene Parameter landen automatisch in den Variablen $_GET und $_POST und können wie normale Variablen verarbeitet werden print(“Guten Tag, Ihr Name ist $_GET[‘name‘]“); Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 20 PHP: Praxisbeispiel  Laden Sie den Code der Seite http://matrix.seiberkreim.com/dummyformular/ herunter  erfordert VPN-Verbindung  Lesen Sie den Code und vollziehen Sie nach, wie mit den übergebenen Variablen gearbeitet wird Hinweis: Dieser Code ist weder schön noch sicher! Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 21 XSS Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 22 Cross-Site-Scripting: Grundlagen  Nutzt man alle Techniken zusammen, kann man Probleme erzeugen  Ein Client (Browser), der Javascript fröhlich ausführt  Ein Webserver, der Eingaben ungefiltert entgegen nimmt und diese in seine Antwort einbaut Server: print(“Sie haben nach $_GET[‘q‘] gesucht“); Angreifer: http://example.de/search.php?q=<script>alert(1)</script> Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 23 Cross-Site-Scripting: Gefahr Warum ist es gefährlich, wenn ein Angreifer es schafft, JavaScript auszuführen?  Verändern der Webseite („Defacement“)  Zugriff auf Cookies (übernehmen von Login-Sessions)  Auslesen von auf der Webseite dargestellten Informationen (Kontonummer? HIV-Status?) Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 24 Cross-Site-Scripting: Varianten Wir unterscheiden grob zwischen zwei Varianten (es gibt weitere, fortgeschrittenere Techniken)  Reflektives XSS  Angreifer kann einen URL-Parameter kontrollieren und darüber JavaScript ausführen  Stored XSS  Angreifer kann persistent Daten auf einer Webseite hinterlegen, die anschließend von anderen Benutzern angesehen werden (etwa ein Gästebucheintrag mit Schadcode) Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 25 Cross-Site-Scripting: Praxisbeispiel  Rufen Sie http://matrix.seiberkreim.com in Kali auf und loggen Sie sich in DVWA ein  Stellen Sie sicher, dass die Sicherheitsstufe im Menüpunkt „DVWA Security“ auf „Low“ steht  Bringen Sie sowohl reflected als auch stored ein JavaScript zur Ausführung  Gängiges JavaScript zum Testen:  <script>alert(1)</script>, zeigt eine Pop-Up-Meldung Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 26 Cross-Site-Scripting: Schutzmaßnahmen Was kann man dagegen tun?  JavaScript abschalten  keine echte Lösung, schränkt Funktionalität stark ein  Plugins installieren (z.B. NoScript)  Besser, aber keine echte Lösung  Hat nicht jeder, hilft nur begrenzt gut  Also muss der Webseitenbetreiber seine Anwendung absichern Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 27 Cross-Site-Scripting: Absichern  Wir schauen uns drei Ansätze an, um Webseiten serverseitig abzusichern  dazu einen eigenen Webserver mit PHP in Kali starten:  sudo systemctl start apache2  Quellcode unter /var/www/html/xss.php ablegen  Ist im Webbrowser dann über „localhost/xss.php“ erreichbar  Siehe auch „how_to_webserver.txt“ in aufgaben/01_websicherheit  Quellcode der Reflected-XSS-Anwendung gibt es in DVWA: Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 28 Cross-Site-Scripting: Absichern Ansatz 1: Blacklisting / Denylisting / Blocklisting  If strpos($input, ‘<script>‘) !== false) { die(“XSS detected!“); }  Prüft die Eingabe gegen eine „schwarze Liste“ von verbotenen Parametern  Bitte selbst implementieren (vorher Kopie des Quellcodes anlegen) und alle Einfallstore absichern  Ist das sicher? Was denken Sie? Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 29 Cross-Site-Scripting: Absichern Ansatz 1: Blocklisting  <img src=x onerror=alert(1)>  Es gibt verschiedene Wege, JavaScript auszuführen  Natürlich kann man auch <img> noch herausfiltern, aber Kernproblem:  Mit Blocklisting definieren wir, welche bösen Eingaben wir kennen. Kennt der Angreifer auch nur eine Eingabe mehr als wir, hat er gewonnen. Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 30 Cross-Site-Scripting: Absichern Ansatz 2: Bereinigung  $name=strip_tags($_REQUEST[‘name‘]); „strip_tags — Strip HTML and PHP tags from a string“ - https://php.net  Es gibt verschiedene Funktionen in PHP, die derartige Aufgaben übernehmen  Bitte selbst implementieren (weitere Kopie) und alle Einfallstore absichern  Ist das sicher? Was denken Sie? Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 31 Cross-Site-Scripting: Absichern Ansatz 2: Bereinigung Ist das sicher?  Hängt von der Funktion und vom Einsatz ab!  In unserem Beispielfall: Möglicherweise Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 32 Cross-Site-Scripting: Absichern Unsicheres Beispiel:  www.example.de/showimage.php?img=4711.jpg […] <img src=$_GET[‘img‘]> […]  Angreifbar, etwa mit showimage.php?img=x%20onerror=“alert(1)“  Kernproblem: Derartige Funktionen sind auch „nur“ Blocklisting auf hohem Niveau. Es gibt einige gute Funktionen dieser Art, aber es besteht stets die Gefahr, dass sich eine neue Möglichkeit auftut, sie zu umgehen. Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 33 Cross-Site-Scripting: Absichern Ansatz 3: Whitelisting / Allowlisting  if(preg_match('/[^a-z_\\-0-9]/i', $string)) { die(\"Invalid string\"); }  Wir drehen die Blocklist um. Alles was unser „weißen Liste“ entspricht, darf bleiben  In diese Fall: Groß- und Kleinbuchstaben, Zahlen, Unterstrich, Bindestrich  Bitte selbst implementieren (weitere Kopie) und alle Einfallstore absichern  Ist das sicher? Was denken Sie? Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 34 Cross-Site-Scripting: Absichern Ansatz 3: Allowlisting  Hängt davon ab, wie die Allowlist definiert wird  Lässt man nur simple ASCII-Zeichen zu, hat man es sehr leicht  In manchen Kontexten muss man aber mehr Eingaben erlauben (etwa ein CMS-System, in dem Nutzer ihre Beiträge mit HTML anreichern dürfen)  JavaScript braucht nicht viele Zeichen: http://www.jsfuck.com/ Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 35 Cross-Site-Scripting: Fazit  sichere Programmierung ist sehr schwer, man kann an vielen Stellen vieles falsch machen  Frameworks können dabei helfen, Probleme zu lösen  Für PHP gibt es z.B. Symfony  Hilft mit „Validation Constraints“, Eingaben zu überprüfen (etwa: ist die Eingabe eine gültige E- Mailadresse?)  https://symfony.com/doc/current/reference/constraints.html  verschiedene moderne Webtechniken können dabei helfen, XSS zu erschweren  X-XSS-Protection-Header  Content-Security-Policy-Header  ... Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 36 Cross-Site-Scripting: Fazit  die Welt des modernen Webs entwickelt sich stets weiter  Neue Verteidigungstechniken, aber auch Angriffsmöglichkeiten entstehen  Der beste Schutz vor XSS verhindert nicht, dass der Programmierer Fehler in der Businesslogik macht:  Wenn der Preis eines Produkts im Warenkorb clientseitig per JavaScript gespeichert und beim Absenden nicht vom Server überprüft wird, kann man einen BMW auch für 1€ kaufen. Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 37 SQLi Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 38 Grundlagen Web: Datenbanken  Annahme: Webserver soll Daten persistent speichern können  Dazu benötigt er eine Datenbank, aus der PHP Daten holen und dort auch wieder ablegen kann  Klassischerweise benutzt man dafür MySQL, aber auch PostgreSQL, SQLite, …  Sprache, um mit einer Datenbank zu sprechen: SQL Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 39 Grundlagen Web: Datenbanken  SELECT * FROM users WHERE username=“admin“ and password=“123456“;  In PHP z.B. mit der Funktion mysqli_query() an die Datenbank schicken  Es gibt nicht nur SELECT, sondern auch UPDATE, INSERT INTO, DROP, GRANT, …. username password admin 123456 martin winfoinfo123 Datenbanktabelle „users“ Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 40 SQL Injection: Grundlagen  Wir kombinieren wieder das Problem von ungefiltertem Input und unsauberer Programmierung Server: mysqli_query(SELECT * FROM users WHERE username=$_POST[“user“] and password=$_POST[“password“]); Angreifer: username=admin, password=foobar“%20OR%20“1“=“1 Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 41 SQL Injection: Grundlagen Was passiert? SELECT * FROM users WHERE username=“$_POST[‘user‘]“ and password=“$_POST[‘password‘]“); legitimer Nutzer: username=martin, password=winfoinfo123 SELECT * FROM users WHERE username=“martin“ and password=“winfoinfo123“); Angreifer: username=admin, password=foobar“%20OR%20“1“=“1 SELECT * FROM users WHERE username=“admin“ and password=“foobar“ OR “1“=“1“); Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 42 (Legitimes) SQL: Erweitertes Konzept UNION SELECT  Verbindung von zwei verschiedenen Tabellen  SELECT name FROM students UNION SELECT name FROM professors;  Liefert mir alle Namen von Studenten und Professoren  Problem? Verbindung von zwei verschiedenen Tabellen! Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 43 SQL Injection: Gefahr Warum ist es gefährlich, wenn ein Angreifer es schafft, eine SQL Injection auszuführen?  Umgehen von Logins  password=1“ OR “1“=“1  Auslesen von Passwörtern/Zugangsdaten  SELECT artikel UNION SELECT password FROM users; Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 44 SQL Injection: Gefahr Warum ist es gefährlich, wenn ein Angreifer es schafft, eine SQL Injection auszuführen?  Anlegen neuer oder Manipulation bestehender Logins  UPDATE users SET password=“hacked“ WHERE username=“hacker“ AND username=“admin“;  Angriffe auf das Betriebssystem des Datenbankservers  SQL erlaubt ggf. das Lesen von lokalen Dateien, Ausleiten von Informationen über HTTP, Ausführen von Kommandozeilenbefehlen  … Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 45 SQL Injection: Praxisbeispiel  Rufen Sie erneut http://matrix.seiberkreim.com/dvwa auf  Sehen Sie sich die „SQL-Injection“-Aufgabe an und listen Sie mindestens alle fünf Benutzer mit einer SQL-Abfrage auf.  Optional: Exfiltrieren Sie die Passwörter der Benutzer aus der Datenbank  Wenn gelöst: Sichern Sie die Lücke (theoretisch) ab!  Wer mag kann die Anwendung dazu lokal bei sich in Betrieb nehmen, das Aufsetzen einer eigenen Datenbank sprengt aber den Rahmen der Übung. Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 46 SQL Injection: Praxisbeispiel Lösung:  Auflisten aller User: ‘ OR ‘1‘ = ‘1  Ausgeben der Passwörter:  Namen aller Spalten identifizieren: ‘ UNION SELECT 0,column_name FROM information_schema.columns where table_name=‘users’;-- -  Ausgeben von Nutzernamen und Passwörtern: ‘ UNION SELECT 0, concat(user_id, “, “, user, “, “, password) from users;-- - Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 47 SQL Injection: Absichern  Welchen Weg haben Sie zum Absichern gewählt?  Der Königsweg: Prepared Statements  Der SQL-Query wird mit Platzhaltern vorpräpariert und dann bei Bedarf ausgefüllt  $s=$conn→prepare(“SELECT * FROM users WHERE username=? AND password=?“); $s→bind_param(“ss“, $user, $pass); //zwei Variablen vom Typ s(tring) $s→execute(); Informationssicherheit und IT-Forensik | Übung 02 – Websicherheit | M.Sc. Phil Knüfer – phil.knuefer@rub.de 48 SQL Injection: Fazit  SQL Injections können sehr gefährlich werden  Prepared Statements helfen, das Probem zu lösen  Frameworks helfen auch:  Abstraktionsschichten wie ORM (Object Relational Mapping)  Aber auch hier: Gegen die Fehler in der Businesslogik helfen keine Prepared Statements","libVersion":"0.3.2","langs":""}