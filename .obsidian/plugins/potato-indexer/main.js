/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Indexer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/indexSvc.ts
function generateIndex(content, settings) {
  if (!content || !content.trim()) {
    return "";
  }
  const lines = content.split("\n");
  let index = `${settings.headerTitleToLookFor}

`;
  const indexPos = [];
  let contents = "";
  let indexFound = false;
  for (let i = 0; i < lines.length; ++i) {
    const line = lines[i];
    if (!line || !line.trim())
      continue;
    if (line.includes(settings.headerTitleToLookFor)) {
      indexPos[0] = i;
      indexPos[1] = i;
      indexFound = true;
    } else if (indexFound && line.includes("- [")) {
      indexPos[1] = i;
    } else if (line.startsWith("#")) {
      if (indexPos.length === 0) {
        if (settings.insertAfterFirstHeader) {
          indexPos[0] = i + 1;
        } else {
          indexPos[0] = 0;
        }
      }
      contents += `${generateLink(line, contents.length === 0 ? "" : void 0)}
`;
    }
  }
  if (indexPos.length === 0)
    return content;
  index += contents;
  const preIndexContent = lines.slice(0, indexPos[0]);
  const postContentStart = indexPos[1] != null ? indexPos[1] + 1 : indexPos[0];
  const postIndexContent = lines.slice(postContentStart);
  if (preIndexContent.length > 0) {
    if (preIndexContent.at(-1)?.trim() === "" && preIndexContent.at(-2)?.[0] === "#") {
      index = "\n" + index;
    } else if (preIndexContent.at(-1)?.[0] === "#") {
      index = "\n\n" + index;
    }
  }
  if (postIndexContent.length > 0 && postIndexContent[0] !== "") {
    index = index + "\n";
  }
  const newContent = preIndexContent.join("\n") + index + postIndexContent.join("\n");
  return newContent;
}
function generateLink(header, tabsOverride) {
  let tabs = "";
  let h = "";
  let headerTitle = "";
  for (let i = 0; i < header.length; ++i) {
    const char = header[i];
    if (char === "#") {
      tabs += "	";
      h += "#";
    } else {
      headerTitle = header.substring(i);
      break;
    }
  }
  headerTitle = headerTitle.trim();
  tabs = tabs.slice(0, -1);
  if (tabsOverride != null)
    tabs = tabsOverride;
  return `${tabs}- [${headerTitle}](${h}${headerTitle.replaceAll(" ", "%20")})`;
}

// src/settings/model.ts
var DEFAULT_SETTINGS = {
  headerTitleToLookFor: "## Content Index",
  insertAfterFirstHeader: true
};

// src/settings/settings.ts
var import_obsidian = require("obsidian");
var IndexerSettingsTab = class extends import_obsidian.PluginSettingTab {
  plugin;
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Header title").setDesc(`What title the index will look for to perform updates on. The default value is: ${DEFAULT_SETTINGS.headerTitleToLookFor}`).addText(
      (text) => text.setPlaceholder("## Example").setValue(this.plugin.settings.headerTitleToLookFor).onChange(async (value) => {
        this.plugin.settings.headerTitleToLookFor = value || DEFAULT_SETTINGS.headerTitleToLookFor;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Insert after first header").setDesc("Toggle to change insert to the top of the note").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.insertAfterFirstHeader).onChange(async (value) => {
        this.plugin.settings.insertAfterFirstHeader = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var Indexer = class extends import_obsidian2.Plugin {
  settings;
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "generate-selection-index",
      name: "Generate index for selected content",
      editorCallback: (editor) => {
        const newContent = generateIndex(editor.getSelection(), this.settings);
        editor.replaceSelection(newContent);
      }
    });
    this.addCommand({
      id: "generate-note-index",
      name: "Generate index for current note",
      editorCallback: (editor) => {
        const note = editor.getValue();
        const newContent = generateIndex(note, this.settings);
        editor.setValue(newContent);
      }
    });
    this.addSettingTab(new IndexerSettingsTab(this.app, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
